"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const core_1 = require("@oclif/core");
const EasCommand_1 = tslib_1.__importDefault(require("../../commandUtils/EasCommand"));
const flags_1 = require("../../commandUtils/flags");
const stateMachine_1 = require("../../commandUtils/workflow/stateMachine");
const log_1 = tslib_1.__importDefault(require("../../log"));
const json_1 = require("../../utils/json");
function printLogsForAllSteps(logs) {
    [...logs.keys()].forEach(step => {
        const logLines = logs.get(step);
        if (logLines) {
            log_1.default.log(`Step: ${step}`);
            logLines.forEach(line => {
                log_1.default.log(`  ${line.time} ${line.msg}`);
            });
        }
        log_1.default.addNewLineIfNone();
    });
}
class WorkflowLogView extends EasCommand_1.default {
    static description = 'view logs for a workflow run, selecting a job and step to view. You can pass in either a workflow run ID or a job ID. If no ID is passed in, you will be prompted to select from recent workflow runs for the current project.';
    static flags = {
        ...flags_1.EasJsonOnlyFlag,
        ...flags_1.EASNonInteractiveFlag,
        'all-steps': core_1.Flags.boolean({
            description: 'Print all logs, rather than prompting for a specific step. This will be automatically set when in non-interactive mode.',
            default: false,
        }),
    };
    static args = [
        { name: 'id', description: 'ID of the workflow run or workflow job to view logs for' },
    ];
    static contextDefinition = {
        ...this.ContextOptions.ProjectId,
        ...this.ContextOptions.LoggedIn,
    };
    async runAsync() {
        const { args, flags } = await this.parse(WorkflowLogView);
        const nonInteractive = flags['non-interactive'];
        const allSteps = nonInteractive ? true : flags['all-steps'];
        log_1.default.debug(`allSteps = ${allSteps}`);
        log_1.default.debug(`nonInteractive = ${nonInteractive}`);
        log_1.default.debug(`flags.json = ${flags.json}`);
        log_1.default.debug(`args.id = ${args.id}`);
        const { loggedIn: { graphqlClient }, projectId, } = await this.getContextAsync(WorkflowLogView, {
            nonInteractive,
        });
        if (flags.json) {
            (0, json_1.enableJsonOutput)();
        }
        const finalSelectionState = await (0, stateMachine_1.executeWorkflowSelectionActionsAsync)({
            graphqlClient,
            projectId,
            nonInteractive,
            allSteps,
            state: stateMachine_1.WorkflowCommandSelectionStateValue.WORKFLOW_JOB_SELECTION,
            jobId: args.id,
        });
        if (finalSelectionState.state === stateMachine_1.WorkflowCommandSelectionStateValue.ERROR) {
            log_1.default.error(finalSelectionState.message);
            return;
        }
        const logs = finalSelectionState?.logs;
        if (allSteps) {
            if (logs) {
                if (flags.json) {
                    (0, json_1.printJsonOnlyOutput)(Object.fromEntries(logs));
                }
                else {
                    printLogsForAllSteps(logs);
                }
            }
        }
        else {
            const selectedStep = finalSelectionState?.step;
            const logLines = logs?.get(selectedStep);
            if (logLines) {
                if (flags.json) {
                    const output = {};
                    output[selectedStep] = logLines ?? null;
                    (0, json_1.printJsonOnlyOutput)(output);
                }
                else {
                    logLines.forEach(line => {
                        log_1.default.log(`  ${line.time} ${line.msg}`);
                    });
                }
            }
        }
    }
}
exports.default = WorkflowLogView;
