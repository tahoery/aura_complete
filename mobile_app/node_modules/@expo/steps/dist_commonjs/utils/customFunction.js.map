{"version":3,"file":"customFunction.js","sourceRoot":"","sources":["../../src/utils/customFunction.ts"],"names":[],"mappings":";;;;;;AAyBA,0CASC;AAED,8CASC;AAED,4DAuCC;AAtFD,gDAAwB;AAExB,yCAA0C;AAC1C,wDAA0B;AAO1B,+CAA8C;AAE9C,MAAM,WAAW,GAAG,IAAA,yBAAa,GAAE,CAAC;AAEvB,QAAA,YAAY,GAAG,cAAI,CAAC,IAAI,CAAC,WAAW,CAAC,OAAO,EAAE,6BAA6B,CAAC,CAAC;AAW1F,SAAgB,eAAe,CAC7B,MAAkD;IAElD,OAAO,MAAM,CAAC,WAAW,CACvB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,KAAK,CAAC,EAAE,EAAE,CAAC;QAC1C,EAAE;QACF,EAAE,eAAe,EAAE,KAAK,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,SAAS,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE;KACnF,CAAC,CACH,CAAC;AACJ,CAAC;AAED,SAAgB,iBAAiB,CAC/B,MAAwD;IAExD,OAAO,MAAM,CAAC,WAAW,CACvB,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,EAAE,eAAe,EAAE,CAAC,EAAE,EAAE,CAAC;QACxD,EAAE;QACF,EAAE,KAAK,EAAE,eAAe,KAAK,SAAS,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,IAAI,CAAC,KAAK,CAAC,eAAe,CAAC,EAAE;KACnF,CAAC,CACH,CAAC;AACJ,CAAC;AAED,SAAgB,wBAAwB,CAAC,2BAAmC;IAC1E,OAAO,KAAK,EAAE,GAAG,EAAE,EAAE,GAAG,EAAE,MAAM,EAAE,OAAO,EAAE,EAAE,EAAE;QAC7C,IAAI,wBAAwB,GAAG,2BAA2B,CAAC;QAC3D,IAAI,CAAC,CAAC,MAAM,kBAAE,CAAC,MAAM,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,CAAC,CAAC,EAAE,CAAC;YAC1D,MAAM,QAAQ,GAAG,cAAI,CAAC,QAAQ,CAC5B,cAAI,CAAC,OAAO,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,CAAC,EAC/C,wBAAwB,CACzB,CAAC;YACF,wBAAwB,GAAG,cAAI,CAAC,OAAO,CACrC,cAAI,CAAC,IAAI,CAAC,GAAG,CAAC,MAAM,CAAC,sBAAsB,EAAE,QAAQ,CAAC,CACvD,CAAC;QACJ,CAAC;QACD,MAAM,mBAAmB,GAA2C;YAClE,GAAG;YACH,MAAM,EAAE,eAAe,CAAC,MAAM,CAAC;YAC/B,OAAO,EAAE,MAAM,CAAC,WAAW,CACzB,MAAM,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,EAAE,EAAE,CAAC,CAAC,EAAE,EAAE,MAAM,CAAC,SAAS,EAAE,CAAC,CAAC,CACxE;YACD,GAAG,EAAE,GAAG,CAAC,SAAS,EAAE;SACrB,CAAC;QACF,IAAI,CAAC;YACH,MAAM,IAAA,qBAAU,EACd,MAAM,EACN;gBACE,cAAI,CAAC,IAAI,CAAC,oBAAY,EAAE,uBAAuB,CAAC;gBAChD,wBAAwB;gBACxB,IAAI,CAAC,SAAS,CAAC,mBAAmB,CAAC;aACpC,EACD;gBACE,MAAM,EAAE,GAAG,CAAC,MAAM;gBAClB,GAAG,EAAE,GAAG,CAAC,gBAAgB;gBACzB,GAAG;gBACH,KAAK,EAAE,MAAM;aACd,CACF,CAAC;QACJ,CAAC;QAAC,MAAM,CAAC;YACP,MAAM,IAAI,KAAK,CAAC,iDAAiD,CAAC,CAAC;QACrE,CAAC;IACH,CAAC,CAAC;AACJ,CAAC","sourcesContent":["import path from 'path';\n\nimport { createContext } from 'this-file';\nimport fs from 'fs-extra';\n\nimport { BuildStepFunction } from '../BuildStep.js';\nimport { BuildStepEnv } from '../BuildStepEnv.js';\nimport { SerializedBuildStepOutput } from '../BuildStepOutput.js';\nimport { SerializedBuildStepContext } from '../BuildStepContext.js';\n\nimport { spawnAsync } from './shell/spawn.js';\n\nconst thisFileCtx = createContext();\n\nexport const SCRIPTS_PATH = path.join(thisFileCtx.dirname, '../../dist_commonjs/scripts');\n\ntype SerializedBuildStepInput = { serializedValue: string | undefined };\n\nexport interface SerializedCustomBuildFunctionArguments {\n  env: BuildStepEnv;\n  inputs: Record<string, SerializedBuildStepInput>;\n  outputs: Record<string, SerializedBuildStepOutput>;\n  ctx: SerializedBuildStepContext;\n}\n\nexport function serializeInputs(\n  inputs: Parameters<BuildStepFunction>[1]['inputs']\n): SerializedCustomBuildFunctionArguments['inputs'] {\n  return Object.fromEntries(\n    Object.entries(inputs).map(([id, input]) => [\n      id,\n      { serializedValue: input === undefined ? undefined : JSON.stringify(input.value) },\n    ])\n  );\n}\n\nexport function deserializeInputs(\n  inputs: SerializedCustomBuildFunctionArguments['inputs']\n): Parameters<BuildStepFunction>[1]['inputs'] {\n  return Object.fromEntries(\n    Object.entries(inputs).map(([id, { serializedValue }]) => [\n      id,\n      { value: serializedValue === undefined ? undefined : JSON.parse(serializedValue) },\n    ])\n  );\n}\n\nexport function createCustomFunctionCall(rawCustomFunctionModulePath: string): BuildStepFunction {\n  return async (ctx, { env, inputs, outputs }) => {\n    let customFunctionModulePath = rawCustomFunctionModulePath;\n    if (!(await fs.exists(ctx.global.projectSourceDirectory))) {\n      const relative = path.relative(\n        path.resolve(ctx.global.projectSourceDirectory),\n        customFunctionModulePath\n      );\n      customFunctionModulePath = path.resolve(\n        path.join(ctx.global.projectTargetDirectory, relative)\n      );\n    }\n    const serializedArguments: SerializedCustomBuildFunctionArguments = {\n      env,\n      inputs: serializeInputs(inputs),\n      outputs: Object.fromEntries(\n        Object.entries(outputs).map(([id, output]) => [id, output.serialize()])\n      ),\n      ctx: ctx.serialize(),\n    };\n    try {\n      await spawnAsync(\n        'node',\n        [\n          path.join(SCRIPTS_PATH, 'runCustomFunction.cjs'),\n          customFunctionModulePath,\n          JSON.stringify(serializedArguments),\n        ],\n        {\n          logger: ctx.logger,\n          cwd: ctx.workingDirectory,\n          env,\n          stdio: 'pipe',\n        }\n      );\n    } catch {\n      throw new Error(`Custom function exited with non-zero exit code.`);\n    }\n  };\n}\n"]}