{"version":3,"file":"BuildStepInput.js","sourceRoot":"","sources":["../src/BuildStepInput.ts"],"names":[],"mappings":"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","sourcesContent":["import assert from 'assert';\n\nimport { JobInterpolationContext } from '@expo/eas-build-job';\n\nimport { BuildStepGlobalContext } from './BuildStepContext.js';\nimport { BuildStepRuntimeError } from './errors.js';\nimport {\n  BUILD_STEP_OR_BUILD_GLOBAL_CONTEXT_REFERENCE_REGEX,\n  interpolateWithOutputs,\n} from './utils/template.js';\nimport { interpolateJobContext } from './interpolation.js';\n\nexport enum BuildStepInputValueTypeName {\n  STRING = 'string',\n  BOOLEAN = 'boolean',\n  NUMBER = 'number',\n  JSON = 'json',\n}\n\nexport type BuildStepInputValueType<\n  T extends BuildStepInputValueTypeName = BuildStepInputValueTypeName,\n> = T extends BuildStepInputValueTypeName.STRING\n  ? string\n  : T extends BuildStepInputValueTypeName.BOOLEAN\n    ? boolean\n    : T extends BuildStepInputValueTypeName.NUMBER\n      ? number\n      : Record<string, unknown>;\n\nexport type BuildStepInputById = Record<string, BuildStepInput>;\nexport type BuildStepInputProvider = (\n  ctx: BuildStepGlobalContext,\n  stepId: string\n) => BuildStepInput;\n\ninterface BuildStepInputProviderParams<\n  T extends BuildStepInputValueTypeName = BuildStepInputValueTypeName,\n  R extends boolean = boolean,\n> {\n  id: string;\n  allowedValues?: unknown[];\n  defaultValue?: unknown;\n  required: R;\n  allowedValueTypeName: T;\n}\n\ninterface BuildStepInputParams<T extends BuildStepInputValueTypeName, R extends boolean>\n  extends BuildStepInputProviderParams<T, R> {\n  stepDisplayName: string;\n}\n\nexport class BuildStepInput<\n  T extends BuildStepInputValueTypeName = BuildStepInputValueTypeName,\n  R extends boolean = boolean,\n> {\n  public readonly id: string;\n  public readonly stepDisplayName: string;\n  public readonly defaultValue?: unknown;\n  public readonly allowedValues?: unknown[];\n  public readonly allowedValueTypeName: T;\n  public readonly required: R;\n\n  private _value?: unknown;\n\n  public static createProvider(params: BuildStepInputProviderParams): BuildStepInputProvider {\n    return (ctx, stepDisplayName) => new BuildStepInput(ctx, { ...params, stepDisplayName });\n  }\n\n  constructor(\n    private readonly ctx: BuildStepGlobalContext,\n    {\n      id,\n      stepDisplayName,\n      allowedValues,\n      defaultValue,\n      required,\n      allowedValueTypeName,\n    }: BuildStepInputParams<T, R>\n  ) {\n    this.id = id;\n    this.stepDisplayName = stepDisplayName;\n    this.allowedValues = allowedValues;\n    this.defaultValue = defaultValue;\n    this.required = required;\n    this.allowedValueTypeName = allowedValueTypeName;\n  }\n\n  public getValue({\n    interpolationContext,\n  }: {\n    interpolationContext: JobInterpolationContext;\n  }): R extends true ? BuildStepInputValueType<T> : BuildStepInputValueType<T> | undefined {\n    const rawValue = this._value ?? this.defaultValue;\n    if (this.required && rawValue === undefined) {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" is required but it was not set.`\n      );\n    }\n\n    const interpolatedValue = interpolateJobContext({\n      target: rawValue,\n      context: interpolationContext,\n    });\n\n    const valueDoesNotRequireInterpolation =\n      interpolatedValue === undefined ||\n      interpolatedValue === null ||\n      typeof interpolatedValue === 'boolean' ||\n      typeof interpolatedValue === 'number';\n    let returnValue;\n    if (valueDoesNotRequireInterpolation) {\n      if (\n        typeof interpolatedValue !== this.allowedValueTypeName &&\n        interpolatedValue !== undefined\n      ) {\n        throw new BuildStepRuntimeError(\n          `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" must be of type \"${this.allowedValueTypeName}\".`\n        );\n      }\n      returnValue = interpolatedValue as BuildStepInputValueType<T>;\n    } else {\n      // `valueDoesNotRequireInterpolation` checks that `rawValue` is not undefined\n      // so this will never be true.\n      assert(interpolatedValue !== undefined);\n      const valueInterpolatedWithGlobalContext = this.ctx.interpolate(interpolatedValue);\n      const valueInterpolatedWithOutputsAndGlobalContext = interpolateWithOutputs(\n        valueInterpolatedWithGlobalContext,\n        (path) => this.ctx.getStepOutputValue(path) ?? ''\n      );\n      returnValue = this.parseInputValueToAllowedType(valueInterpolatedWithOutputsAndGlobalContext);\n    }\n    return returnValue;\n  }\n\n  public get rawValue(): unknown {\n    return this._value ?? this.defaultValue;\n  }\n\n  public set(value: unknown): BuildStepInput {\n    if (this.required && value === undefined) {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" is required.`\n      );\n    }\n\n    this._value = value;\n    return this;\n  }\n\n  public isRawValueOneOfAllowedValues(): boolean {\n    const value = this._value ?? this.defaultValue;\n    if (this.allowedValues === undefined || value === undefined) {\n      return true;\n    }\n    return this.allowedValues.includes(value);\n  }\n\n  public isRawValueStepOrContextReference(): boolean {\n    return (\n      typeof this.rawValue === 'string' &&\n      (!!BUILD_STEP_OR_BUILD_GLOBAL_CONTEXT_REFERENCE_REGEX.exec(this.rawValue) ||\n        // If value is an interpolation reference we're going to render whatever it evaluates to.\n        // See `interpolateJobContext`.\n        (this.rawValue.startsWith('${{') && this.rawValue.endsWith('}}')))\n    );\n  }\n\n  private parseInputValueToAllowedType(\n    value: string | object | boolean | number\n  ): BuildStepInputValueType<T> {\n    if (typeof value === 'object') {\n      return value as BuildStepInputValueType<T>;\n    }\n    if (this.allowedValueTypeName === BuildStepInputValueTypeName.STRING) {\n      return this.parseInputValueToString(value) as BuildStepInputValueType<T>;\n    } else if (this.allowedValueTypeName === BuildStepInputValueTypeName.NUMBER) {\n      return this.parseInputValueToNumber(value) as BuildStepInputValueType<T>;\n    } else if (this.allowedValueTypeName === BuildStepInputValueTypeName.BOOLEAN) {\n      return this.parseInputValueToBoolean(value) as BuildStepInputValueType<T>;\n    } else {\n      return this.parseInputValueToObject(value) as BuildStepInputValueType<T>;\n    }\n  }\n\n  private parseInputValueToString(value: string | boolean | number): string {\n    let parsedValue = value;\n    try {\n      parsedValue = JSON.parse(`\"${value}\"`);\n    } catch (err) {\n      if (!(err instanceof SyntaxError)) {\n        throw err;\n      }\n    }\n    return parsedValue as string;\n  }\n\n  private parseInputValueToNumber(value: string | boolean | number): number {\n    const numberValue = Number(value);\n    if (Number.isNaN(numberValue)) {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" must be of type \"${this.allowedValueTypeName}\".`\n      );\n    }\n    return numberValue;\n  }\n\n  private parseInputValueToBoolean(value: string | boolean | number): boolean {\n    if (value === 'true' || value === true) {\n      return true;\n    } else if (value === 'false' || value === false) {\n      return false;\n    } else {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" must be of type \"${this.allowedValueTypeName}\".`\n      );\n    }\n  }\n\n  private parseInputValueToObject(value: string | boolean | number): Record<string, any> {\n    try {\n      return JSON.parse(value as string);\n    } catch (e: any) {\n      throw new BuildStepRuntimeError(\n        `Input parameter \"${this.id}\" for step \"${this.stepDisplayName}\" must be of type \"${this.allowedValueTypeName}\".`,\n        {\n          cause: e,\n        }\n      );\n    }\n  }\n}\n\nexport function makeBuildStepInputByIdMap(inputs?: BuildStepInput[]): BuildStepInputById {\n  if (inputs === undefined) {\n    return {};\n  }\n  return inputs.reduce((acc, input) => {\n    acc[input.id] = input;\n    return acc;\n  }, {} as BuildStepInputById);\n}\n"]}