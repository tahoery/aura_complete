import { z } from 'zod';
import { LoggerLevel } from '@expo/logger';
import { BuildTrigger } from './common';
export declare namespace Generic {
    type Job = z.infer<typeof JobZ>;
    const JobZ: z.ZodObject<{
        projectArchive: z.ZodDiscriminatedUnion<[z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.GIT>;
            repositoryUrl: z.ZodString;
            gitRef: z.ZodNullable<z.ZodString>;
            gitCommitHash: z.ZodString;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.PATH>;
            path: z.ZodString;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.URL>;
            url: z.ZodString;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.GCS>;
            bucketKey: z.ZodString;
            metadataLocation: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>], "type">;
        secrets: z.ZodObject<{
            robotAccessToken: z.ZodString;
            environmentSecrets: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodString;
                type: z.ZodEnum<typeof import("./common").EnvironmentSecretType>;
            }, z.core.$strip>>;
        }, z.core.$strip>;
        expoDevUrl: z.ZodString;
        builderEnvironment: z.ZodObject<{
            image: z.ZodString;
            node: z.ZodOptional<z.ZodString>;
            corepack: z.ZodOptional<z.ZodBoolean>;
            yarn: z.ZodOptional<z.ZodString>;
            pnpm: z.ZodOptional<z.ZodString>;
            bun: z.ZodOptional<z.ZodString>;
            env: z.ZodRecord<z.ZodString, z.ZodString>;
            ndk: z.ZodOptional<z.ZodString>;
            bundler: z.ZodOptional<z.ZodString>;
            fastlane: z.ZodOptional<z.ZodString>;
            cocoapods: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>;
        platform: z.ZodOptional<z.ZodNever>;
        type: z.ZodOptional<z.ZodNever>;
        triggeredBy: z.ZodLiteral<BuildTrigger.GIT_BASED_INTEGRATION>;
        loggerLevel: z.ZodOptional<z.ZodEnum<typeof LoggerLevel>>;
        workflowInterpolationContext: z.ZodOptional<z.ZodObject<{
            after: z.ZodRecord<z.ZodString, z.ZodObject<{
                status: z.ZodString;
                outputs: z.ZodRecord<z.ZodString, z.ZodNullable<z.ZodString>>;
            }, z.core.$strip>>;
            needs: z.ZodRecord<z.ZodString, z.ZodObject<{
                status: z.ZodString;
                outputs: z.ZodRecord<z.ZodString, z.ZodNullable<z.ZodString>>;
            }, z.core.$strip>>;
            inputs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
            github: z.ZodOptional<z.ZodObject<{
                triggering_actor: z.ZodOptional<z.ZodString>;
                event_name: z.ZodEnum<{
                    push: "push";
                    pull_request: "pull_request";
                    workflow_dispatch: "workflow_dispatch";
                    schedule: "schedule";
                }>;
                sha: z.ZodString;
                ref: z.ZodString;
                ref_name: z.ZodString;
                ref_type: z.ZodString;
                commit_message: z.ZodOptional<z.ZodString>;
                label: z.ZodOptional<z.ZodString>;
                repository: z.ZodOptional<z.ZodString>;
                repository_owner: z.ZodOptional<z.ZodString>;
                event: z.ZodOptional<z.ZodObject<{
                    label: z.ZodOptional<z.ZodObject<{
                        name: z.ZodString;
                    }, z.core.$strip>>;
                    head_commit: z.ZodOptional<z.ZodObject<{
                        message: z.ZodString;
                        id: z.ZodString;
                    }, z.core.$strip>>;
                    pull_request: z.ZodOptional<z.ZodObject<{
                        number: z.ZodNumber;
                    }, z.core.$strip>>;
                    number: z.ZodOptional<z.ZodNumber>;
                    schedule: z.ZodOptional<z.ZodString>;
                    inputs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
                }, z.core.$strip>>;
            }, z.core.$strip>>;
            workflow: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                filename: z.ZodString;
                url: z.ZodString;
            }, z.core.$loose>;
        }, z.core.$strip>>;
        initiatingUserId: z.ZodString;
        appId: z.ZodString;
        steps: z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            if: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
            working_directory: z.ZodOptional<z.ZodString>;
            env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            run: z.ZodString;
            shell: z.ZodOptional<z.ZodString>;
            outputs: z.ZodOptional<z.ZodArray<z.ZodUnion<readonly [z.ZodCodec<z.ZodString, z.ZodObject<{
                name: z.ZodString;
                required: z.ZodDefault<z.ZodBoolean>;
            }, z.core.$strip>>, z.ZodObject<{
                name: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strip>]>>>;
            uses: z.ZodOptional<z.ZodNever>;
            with: z.ZodOptional<z.ZodNever>;
        }, z.core.$strip>, z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            if: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
            working_directory: z.ZodOptional<z.ZodString>;
            env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            uses: z.ZodString;
            with: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            run: z.ZodOptional<z.ZodNever>;
            shell: z.ZodOptional<z.ZodNever>;
            outputs: z.ZodOptional<z.ZodNever>;
        }, z.core.$strip>]>>;
        outputs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
    }, z.core.$strip>;
    type PartialJob = z.infer<typeof PartialJobZ>;
    const PartialJobZ: z.ZodObject<{
        projectArchive: z.ZodOptional<z.ZodDiscriminatedUnion<[z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.GIT>;
            repositoryUrl: z.ZodString;
            gitRef: z.ZodNullable<z.ZodString>;
            gitCommitHash: z.ZodString;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.PATH>;
            path: z.ZodString;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.URL>;
            url: z.ZodString;
        }, z.core.$strip>, z.ZodObject<{
            type: z.ZodLiteral<import("./common").ArchiveSourceType.GCS>;
            bucketKey: z.ZodString;
            metadataLocation: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>], "type">>;
        secrets: z.ZodOptional<z.ZodObject<{
            robotAccessToken: z.ZodString;
            environmentSecrets: z.ZodArray<z.ZodObject<{
                name: z.ZodString;
                value: z.ZodString;
                type: z.ZodEnum<typeof import("./common").EnvironmentSecretType>;
            }, z.core.$strip>>;
        }, z.core.$strip>>;
        expoDevUrl: z.ZodOptional<z.ZodString>;
        builderEnvironment: z.ZodOptional<z.ZodObject<{
            image: z.ZodString;
            node: z.ZodOptional<z.ZodString>;
            corepack: z.ZodOptional<z.ZodBoolean>;
            yarn: z.ZodOptional<z.ZodString>;
            pnpm: z.ZodOptional<z.ZodString>;
            bun: z.ZodOptional<z.ZodString>;
            env: z.ZodRecord<z.ZodString, z.ZodString>;
            ndk: z.ZodOptional<z.ZodString>;
            bundler: z.ZodOptional<z.ZodString>;
            fastlane: z.ZodOptional<z.ZodString>;
            cocoapods: z.ZodOptional<z.ZodString>;
        }, z.core.$strip>>;
        platform: z.ZodOptional<z.ZodOptional<z.ZodNever>>;
        type: z.ZodOptional<z.ZodOptional<z.ZodNever>>;
        triggeredBy: z.ZodOptional<z.ZodLiteral<BuildTrigger.GIT_BASED_INTEGRATION>>;
        loggerLevel: z.ZodOptional<z.ZodOptional<z.ZodEnum<typeof LoggerLevel>>>;
        workflowInterpolationContext: z.ZodOptional<z.ZodOptional<z.ZodObject<{
            after: z.ZodRecord<z.ZodString, z.ZodObject<{
                status: z.ZodString;
                outputs: z.ZodRecord<z.ZodString, z.ZodNullable<z.ZodString>>;
            }, z.core.$strip>>;
            needs: z.ZodRecord<z.ZodString, z.ZodObject<{
                status: z.ZodString;
                outputs: z.ZodRecord<z.ZodString, z.ZodNullable<z.ZodString>>;
            }, z.core.$strip>>;
            inputs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
            github: z.ZodOptional<z.ZodObject<{
                triggering_actor: z.ZodOptional<z.ZodString>;
                event_name: z.ZodEnum<{
                    push: "push";
                    pull_request: "pull_request";
                    workflow_dispatch: "workflow_dispatch";
                    schedule: "schedule";
                }>;
                sha: z.ZodString;
                ref: z.ZodString;
                ref_name: z.ZodString;
                ref_type: z.ZodString;
                commit_message: z.ZodOptional<z.ZodString>;
                label: z.ZodOptional<z.ZodString>;
                repository: z.ZodOptional<z.ZodString>;
                repository_owner: z.ZodOptional<z.ZodString>;
                event: z.ZodOptional<z.ZodObject<{
                    label: z.ZodOptional<z.ZodObject<{
                        name: z.ZodString;
                    }, z.core.$strip>>;
                    head_commit: z.ZodOptional<z.ZodObject<{
                        message: z.ZodString;
                        id: z.ZodString;
                    }, z.core.$strip>>;
                    pull_request: z.ZodOptional<z.ZodObject<{
                        number: z.ZodNumber;
                    }, z.core.$strip>>;
                    number: z.ZodOptional<z.ZodNumber>;
                    schedule: z.ZodOptional<z.ZodString>;
                    inputs: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnion<readonly [z.ZodString, z.ZodNumber, z.ZodBoolean]>>>;
                }, z.core.$strip>>;
            }, z.core.$strip>>;
            workflow: z.ZodObject<{
                id: z.ZodString;
                name: z.ZodString;
                filename: z.ZodString;
                url: z.ZodString;
            }, z.core.$loose>;
        }, z.core.$strip>>>;
        initiatingUserId: z.ZodOptional<z.ZodString>;
        appId: z.ZodOptional<z.ZodString>;
        steps: z.ZodOptional<z.ZodArray<z.ZodUnion<readonly [z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            if: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
            working_directory: z.ZodOptional<z.ZodString>;
            env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            run: z.ZodString;
            shell: z.ZodOptional<z.ZodString>;
            outputs: z.ZodOptional<z.ZodArray<z.ZodUnion<readonly [z.ZodCodec<z.ZodString, z.ZodObject<{
                name: z.ZodString;
                required: z.ZodDefault<z.ZodBoolean>;
            }, z.core.$strip>>, z.ZodObject<{
                name: z.ZodString;
                required: z.ZodOptional<z.ZodBoolean>;
            }, z.core.$strip>]>>>;
            uses: z.ZodOptional<z.ZodNever>;
            with: z.ZodOptional<z.ZodNever>;
        }, z.core.$strip>, z.ZodObject<{
            id: z.ZodOptional<z.ZodString>;
            if: z.ZodOptional<z.ZodString>;
            name: z.ZodOptional<z.ZodString>;
            working_directory: z.ZodOptional<z.ZodString>;
            env: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>;
            uses: z.ZodString;
            with: z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodUnknown>>;
            run: z.ZodOptional<z.ZodNever>;
            shell: z.ZodOptional<z.ZodNever>;
            outputs: z.ZodOptional<z.ZodNever>;
        }, z.core.$strip>]>>>;
        outputs: z.ZodOptional<z.ZodOptional<z.ZodRecord<z.ZodString, z.ZodString>>>;
    }, z.core.$strip>;
}
