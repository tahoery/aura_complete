{"version":3,"names":[],"sources":["views.ts"],"sourcesContent":["import type { PropsWithChildren } from \"react\";\nimport type { ViewProps } from \"react-native\";\n\nexport type KeyboardGestureAreaProps = {\n  /**\n   * Determines how the keyboard position will be controlled:\n   * - `ios` - keyboard will be following finger only when finger touches keyboard\n   * - `linear` - keyboard will be following finger position linearly.\n   *\n   * @platform android\n   */\n  interpolator?: \"ios\" | \"linear\";\n  /**\n   * Whether to allow to show a keyboard from dismissed state by swipe up.\n   * Default to `false`.\n   *\n   * @platform android\n   */\n  showOnSwipeUp?: boolean;\n  /**\n   * Whether to allow to control a keyboard by gestures. The strategy how\n   * it should be controlled is determined by `interpolator` property.\n   * Defaults to `true`.\n   *\n   * @platform android\n   */\n  enableSwipeToDismiss?: boolean;\n  /**\n   * Extra distance to the keyboard.\n   */\n  offset?: number;\n  /**\n   * A corresponding `nativeID` value from the associated `TextInput` (a string that links the `KeyboardGestureArea` to one or more `TextInput` components).\n   * This is **required on iOS** in order to apply the `offset` when the keyboard is shown. Only the currently focused `TextInput` with a matching `nativeID`\n   * will receive offset behavior.\n   *\n   * @platform ios\n   */\n  textInputNativeID?: string;\n} & ViewProps;\nexport type OverKeyboardViewProps = PropsWithChildren<{\n  /**\n   * A boolean prop indicating whether the view is visible or not. If it's true then view is shown on the screen. If it's false then view is hidden.\n   */\n  visible: boolean;\n}>;\n"],"mappings":"","ignoreList":[]}