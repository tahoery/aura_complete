{"version":3,"names":[],"sources":["module.ts"],"sourcesContent":["import type { EmitterSubscription, TextInputProps } from \"react-native\";\n\n// Event module declarations\nexport type KeyboardControllerEvents =\n  | \"keyboardWillShow\"\n  | \"keyboardDidShow\"\n  | \"keyboardWillHide\"\n  | \"keyboardDidHide\";\nexport type KeyboardEventData = {\n  /** Height of the keyboard. */\n  height: number;\n  /** Duration of the keyboard animation. */\n  duration: number;\n  /** Timestamp of the last keyboard event. */\n  timestamp: number;\n  /** Tag of the focused `TextInput`. */\n  target: number;\n  /** `keyboardType` property from focused `TextInput`. */\n  type: NonNullable<TextInputProps[\"keyboardType\"]>;\n  /** Keyboard appearance. Can be one of `default`, `dark` or `light`. */\n  appearance: NonNullable<TextInputProps[\"keyboardAppearance\"]>;\n};\n/**\n * An object that represent current keyboard state.\n */\nexport type KeyboardState = {\n  /** Whether the keyboard is currently visible. */\n  isVisible: boolean;\n} & KeyboardEventData;\nexport type KeyboardEventsModule = {\n  /**\n   * The `addListener` function connects a JavaScript function to an identified native\n   * keyboard notification event.\n   *\n   * This function then returns the reference to the listener.\n   *\n   * `name` is the string that identifies the event you're listening for. This\n   * can be any of the following:\n   *\n   * - `keyboardWillShow`;\n   * - `keyboardDidShow`;\n   * - `keyboardWillHide`;\n   * - `keyboardDidHide`.\n   */\n  addListener: (\n    name: KeyboardControllerEvents,\n    cb: (e: KeyboardEventData) => void,\n  ) => EmitterSubscription;\n};\nexport type Direction = \"next\" | \"prev\" | \"current\";\nexport type DismissOptions = {\n  /**\n   * A boolean property indicating whether focus should be kept on the input after dismissing the keyboard. Default is `false`.\n   */\n  keepFocus: boolean;\n};\nexport type KeyboardControllerModule = {\n  // android only\n  /**\n   * Sets default `windowSoftInputMode` (the one that declared in `AndroidManifest.xml`).\n   *\n   * @see {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/keyboard-controller#setdefaultmode-|docs} page for more details.\n   */\n  setDefaultMode: () => void;\n  /**\n   * Changes `windowSoftInputMode` on Android. @see AndroidSoftInputModes for all possible values and {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/keyboard-controller#setinputmode-|docs} page for more details.\n   */\n  setInputMode: (mode: number) => void;\n  // all platforms\n  /**\n   * Dismisses the active keyboard. Removes a focus by default, but allows to pass `{keepFocus: true}` to keep focus.\n   *\n   * @see {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/keyboard-controller#dismiss|docs} page for more details.\n   */\n  dismiss: (options?: DismissOptions) => Promise<void>;\n  /**\n   * Moves focus to the specified direction (`next`, `prev` or `current` to restore a focus).\n   *\n   * @see {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/keyboard-controller#setfocusto|docs} page for more details.\n   */\n  setFocusTo: (direction: Direction) => void;\n  /**\n   * Whether the keyboard is fully visible.\n   *\n   * @see {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/keyboard-controller#isvisible|docs} page for more details.\n   */\n  isVisible: () => boolean;\n  /**\n   * Method that returns current keyboard state.\n   *\n   * @see {@link https://kirillzyusko.github.io/react-native-keyboard-controller/docs/api/keyboard-controller#state|docs} page for more details.\n   */\n  state: () => KeyboardEventData;\n};\nexport type KeyboardControllerNativeModule = {\n  // android only\n  setDefaultMode: () => void;\n  setInputMode: (mode: number) => void;\n  // all platforms\n  dismiss: (keepFocus: boolean) => void;\n  setFocusTo: (direction: Direction) => void;\n  // native event module stuff\n  addListener: (eventName: string) => void;\n  removeListeners: (count: number) => void;\n};\n"],"mappings":"","ignoreList":[]}