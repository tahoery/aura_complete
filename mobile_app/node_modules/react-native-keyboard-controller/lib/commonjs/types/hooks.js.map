{"version":3,"names":[],"sources":["hooks.ts"],"sourcesContent":["import type { NativeSyntheticEvent, ViewProps } from \"react-native\";\n\n// DirectEventHandler events declaration\nexport type NativeEvent = {\n  /** A value between `0` and `1` indicating keyboard position, where `0` means keyboard is closed and `1` means keyboard is fully visible. */\n  progress: number;\n  /** Height of the keyboard. */\n  height: number;\n  /** Duration of the keyboard animation. */\n  duration: number;\n  /** Tag of the focused `TextInput`. */\n  target: number;\n};\nexport type FocusedInputLayoutChangedEvent = {\n  /** Tag of the focused `TextInput`. */\n  target: number;\n  /** Tag of the parent `ScrollView`. */\n  parentScrollViewTarget: number;\n  layout: {\n    /** X coordinate of the focused `TextInput`. */\n    x: number;\n    /** Y coordinate of the focused `TextInput`. */\n    y: number;\n    /** Width of the focused `TextInput`. */\n    width: number;\n    /** Height of the focused `TextInput`. */\n    height: number;\n    /** X coordinate of the focused `TextInput` relative to the screen. */\n    absoluteX: number;\n    /** Y coordinate of the focused `TextInput` relative to the screen. */\n    absoluteY: number;\n  };\n};\nexport type FocusedInputTextChangedEvent = {\n  /** Text that user typed in the focused `TextInput`. */\n  text: string;\n};\nexport type FocusedInputSelectionChangedEvent = {\n  /** Tag of the focused `TextInput`. */\n  target: number;\n  selection: {\n    /** Start of the selection. Represents top-left point of rectangle. */\n    start: {\n      /** X coordinate of the selection start (relative to the `TextInput`). */\n      x: number;\n      /** Y coordinate of the selection start (relative to the `TextInput`). */\n      y: number;\n      /** The start of selection. */\n      position: number;\n    };\n    /** End of the selection. Represents bottom-right point of rectangle. */\n    end: {\n      /** X coordinate of the selection end (relative to the `TextInput`). */\n      x: number;\n      /** Y coordinate of the selection end (relative to the `TextInput`). */\n      y: number;\n      /** The end of selection. */\n      position: number;\n    };\n  };\n};\nexport type EventWithName<T> = {\n  eventName: string;\n} & T;\n\n// native View/Module declarations\nexport type KeyboardControllerProps = {\n  //ref prop\n  ref?: React.Ref<React.Component<KeyboardControllerProps>>;\n  // callback props\n  onKeyboardMoveStart?: (\n    e: NativeSyntheticEvent<EventWithName<NativeEvent>>,\n  ) => void;\n  onKeyboardMove?: (\n    e: NativeSyntheticEvent<EventWithName<NativeEvent>>,\n  ) => void;\n  onKeyboardMoveEnd?: (\n    e: NativeSyntheticEvent<EventWithName<NativeEvent>>,\n  ) => void;\n  onKeyboardMoveInteractive?: (\n    e: NativeSyntheticEvent<EventWithName<NativeEvent>>,\n  ) => void;\n  onFocusedInputLayoutChanged?: (\n    e: NativeSyntheticEvent<EventWithName<FocusedInputLayoutChangedEvent>>,\n  ) => void;\n  onFocusedInputTextChanged?: (\n    e: NativeSyntheticEvent<EventWithName<FocusedInputTextChangedEvent>>,\n  ) => void;\n  onFocusedInputSelectionChanged?: (\n    e: NativeSyntheticEvent<EventWithName<FocusedInputSelectionChangedEvent>>,\n  ) => void;\n  // fake props used to activate reanimated bindings\n  onKeyboardMoveReanimated?: (\n    e: NativeSyntheticEvent<EventWithName<NativeEvent>>,\n  ) => void;\n  onFocusedInputLayoutChangedReanimated?: (\n    e: NativeSyntheticEvent<EventWithName<FocusedInputLayoutChangedEvent>>,\n  ) => void;\n  onFocusedInputTextChangedReanimated?: (\n    e: NativeSyntheticEvent<EventWithName<FocusedInputTextChangedEvent>>,\n  ) => void;\n  onFocusedInputSelectionChangedReanimated?: (\n    e: NativeSyntheticEvent<EventWithName<FocusedInputSelectionChangedEvent>>,\n  ) => void;\n  // props\n  statusBarTranslucent?: boolean;\n  navigationBarTranslucent?: boolean;\n  preserveEdgeToEdge?: boolean;\n  enabled?: boolean;\n} & ViewProps;\n\n// reanimated hook declaration\nexport type KeyboardHandlerHook<TContext, Event> = (\n  handlers: {\n    onKeyboardMoveStart?: (e: NativeEvent, context: TContext) => void;\n    onKeyboardMove?: (e: NativeEvent, context: TContext) => void;\n    onKeyboardMoveEnd?: (e: NativeEvent, context: TContext) => void;\n    onKeyboardMoveInteractive?: (e: NativeEvent, context: TContext) => void;\n  },\n  dependencies?: unknown[],\n) => (e: NativeSyntheticEvent<Event>) => void;\nexport type FocusedInputLayoutHandlerHook<TContext, Event> = (\n  handlers: {\n    onFocusedInputLayoutChanged?: (\n      e: FocusedInputLayoutChangedEvent,\n      context: TContext,\n    ) => void;\n  },\n  dependencies?: unknown[],\n) => (e: NativeSyntheticEvent<Event>) => void;\nexport type FocusedInputTextHandlerHook<TContext, Event> = (\n  handlers: {\n    onFocusedInputTextChanged?: (\n      e: FocusedInputTextChangedEvent,\n      context: TContext,\n    ) => void;\n  },\n  dependencies?: unknown[],\n) => (e: NativeSyntheticEvent<Event>) => void;\nexport type FocusedInputSelectionHandlerHook<TContext, Event> = (\n  handlers: {\n    onFocusedInputSelectionChanged?: (\n      e: FocusedInputSelectionChangedEvent,\n      context: TContext,\n    ) => void;\n  },\n  dependencies?: unknown[],\n) => (e: NativeSyntheticEvent<Event>) => void;\n\n// package types\nexport type Handlers<T> = Record<string, T | undefined>;\nexport type KeyboardHandler = Partial<{\n  /**\n   * A callback that gets invoked when keyboard starts its movement.\n   * The event contains DESTINATION values.\n   *\n   * @example\n   * ```ts\n   * onStart: (e) => {\n   *   \"worklet\";\n   *\n   *   const willKeyboardAppear = e.progress === 1;\n   * }\n   * ```\n   */\n  onStart: (e: NativeEvent) => void;\n  /**\n   * A callback that gets involved every frame when keyboard changes its position.\n   *\n   * @example\n   * ```ts\n   * onMove: (e) => {\n   *   \"worklet\";\n   *\n   *   const keyboardHeight = e.height;\n   * }\n   */\n  onMove: (e: NativeEvent) => void;\n  /**\n   * A callback that gets invoked when keyboard finished its movement.\n   *\n   * @example\n   * ```ts\n   * onEnd: (e) => {\n   *   \"worklet\";\n   *\n   *   const isKeyboardShown = e.progress === 1;\n   * }\n   * ```\n   */\n  onEnd: (e: NativeEvent) => void;\n  /**\n   * A callback that gets invoked every frame when keyboard changes its position due to interactive dismissal.\n   *\n   * @example\n   * ```ts\n   * onInteractive: (e) => {\n   *   \"worklet\";\n   *\n   *   const keyboardHeight = e.height;\n   * }\n   */\n  onInteractive: (e: NativeEvent) => void;\n}>;\nexport type KeyboardHandlers = Handlers<KeyboardHandler>;\nexport type FocusedInputHandler = Partial<{\n  /** A callback that gets invoked every time when the text changes in focused input. */\n  onChangeText: (e: FocusedInputTextChangedEvent) => void;\n  /** A callback that gets invoked every time when the selection (cursor) coordinates change in focused input. */\n  onSelectionChange: (e: FocusedInputSelectionChangedEvent) => void;\n}>;\nexport type FocusedInputHandlers = Handlers<FocusedInputHandler>;\n"],"mappings":"","ignoreList":[]}